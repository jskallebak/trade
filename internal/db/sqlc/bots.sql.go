// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bots.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBot = `-- name: CreateBot :one
INSERT INTO bots (user_id, name, strategy, initial_holding, binance_account_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, name, strategy, status, win_rate, profit_factor, trades, initial_holding, holding, binance_account_id, created_at, updated_at
`

type CreateBotParams struct {
	UserID           int32          `json:"user_id"`
	Name             string         `json:"name"`
	Strategy         string         `json:"strategy"`
	InitialHolding   pgtype.Numeric `json:"initial_holding"`
	BinanceAccountID pgtype.Int4    `json:"binance_account_id"`
}

type CreateBotRow struct {
	ID               int32              `json:"id"`
	UserID           int32              `json:"user_id"`
	Name             string             `json:"name"`
	Strategy         string             `json:"strategy"`
	Status           pgtype.Text        `json:"status"`
	WinRate          pgtype.Numeric     `json:"win_rate"`
	ProfitFactor     pgtype.Numeric     `json:"profit_factor"`
	Trades           pgtype.Int4        `json:"trades"`
	InitialHolding   pgtype.Numeric     `json:"initial_holding"`
	Holding          pgtype.Numeric     `json:"holding"`
	BinanceAccountID pgtype.Int4        `json:"binance_account_id"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateBot(ctx context.Context, arg CreateBotParams) (CreateBotRow, error) {
	row := q.db.QueryRow(ctx, createBot,
		arg.UserID,
		arg.Name,
		arg.Strategy,
		arg.InitialHolding,
		arg.BinanceAccountID,
	)
	var i CreateBotRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Strategy,
		&i.Status,
		&i.WinRate,
		&i.ProfitFactor,
		&i.Trades,
		&i.InitialHolding,
		&i.Holding,
		&i.BinanceAccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBot = `-- name: DeleteBot :exec
DELETE FROM bots
WHERE id = $1 AND user_id = $2
`

type DeleteBotParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteBot(ctx context.Context, arg DeleteBotParams) error {
	_, err := q.db.Exec(ctx, deleteBot, arg.ID, arg.UserID)
	return err
}

const getBot = `-- name: GetBot :one
SELECT id, user_id, name, strategy, status, win_rate, profit_factor, trades, initial_holding, holding, created_at, updated_at
FROM bots
WHERE id = $1 AND user_id = $2
`

type GetBotParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

type GetBotRow struct {
	ID             int32              `json:"id"`
	UserID         int32              `json:"user_id"`
	Name           string             `json:"name"`
	Strategy       string             `json:"strategy"`
	Status         pgtype.Text        `json:"status"`
	WinRate        pgtype.Numeric     `json:"win_rate"`
	ProfitFactor   pgtype.Numeric     `json:"profit_factor"`
	Trades         pgtype.Int4        `json:"trades"`
	InitialHolding pgtype.Numeric     `json:"initial_holding"`
	Holding        pgtype.Numeric     `json:"holding"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetBot(ctx context.Context, arg GetBotParams) (GetBotRow, error) {
	row := q.db.QueryRow(ctx, getBot, arg.ID, arg.UserID)
	var i GetBotRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Strategy,
		&i.Status,
		&i.WinRate,
		&i.ProfitFactor,
		&i.Trades,
		&i.InitialHolding,
		&i.Holding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserBots = `-- name: GetUserBots :many
SELECT id, user_id, name, strategy, status, win_rate, profit_factor, trades, initial_holding, holding, binance_account_id, created_at, updated_at
FROM bots
WHERE user_id = $1
`

type GetUserBotsRow struct {
	ID               int32              `json:"id"`
	UserID           int32              `json:"user_id"`
	Name             string             `json:"name"`
	Strategy         string             `json:"strategy"`
	Status           pgtype.Text        `json:"status"`
	WinRate          pgtype.Numeric     `json:"win_rate"`
	ProfitFactor     pgtype.Numeric     `json:"profit_factor"`
	Trades           pgtype.Int4        `json:"trades"`
	InitialHolding   pgtype.Numeric     `json:"initial_holding"`
	Holding          pgtype.Numeric     `json:"holding"`
	BinanceAccountID pgtype.Int4        `json:"binance_account_id"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetUserBots(ctx context.Context, userID int32) ([]GetUserBotsRow, error) {
	rows, err := q.db.Query(ctx, getUserBots, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserBotsRow
	for rows.Next() {
		var i GetUserBotsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Strategy,
			&i.Status,
			&i.WinRate,
			&i.ProfitFactor,
			&i.Trades,
			&i.InitialHolding,
			&i.Holding,
			&i.BinanceAccountID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBotsWithAccounts = `-- name: GetUserBotsWithAccounts :many
SELECT 
    b.id, b.user_id, b.name, b.strategy, b.status, b.win_rate, b.profit_factor, b.trades, 
    b.initial_holding, b.holding, b.binance_account_id, b.created_at, b.updated_at,
    ba.name as account_name
FROM bots b
LEFT JOIN binance_accounts ba ON b.binance_account_id = ba.id
WHERE b.user_id = $1
`

type GetUserBotsWithAccountsRow struct {
	ID               int32              `json:"id"`
	UserID           int32              `json:"user_id"`
	Name             string             `json:"name"`
	Strategy         string             `json:"strategy"`
	Status           pgtype.Text        `json:"status"`
	WinRate          pgtype.Numeric     `json:"win_rate"`
	ProfitFactor     pgtype.Numeric     `json:"profit_factor"`
	Trades           pgtype.Int4        `json:"trades"`
	InitialHolding   pgtype.Numeric     `json:"initial_holding"`
	Holding          pgtype.Numeric     `json:"holding"`
	BinanceAccountID pgtype.Int4        `json:"binance_account_id"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	AccountName      pgtype.Text        `json:"account_name"`
}

func (q *Queries) GetUserBotsWithAccounts(ctx context.Context, userID int32) ([]GetUserBotsWithAccountsRow, error) {
	rows, err := q.db.Query(ctx, getUserBotsWithAccounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserBotsWithAccountsRow
	for rows.Next() {
		var i GetUserBotsWithAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Strategy,
			&i.Status,
			&i.WinRate,
			&i.ProfitFactor,
			&i.Trades,
			&i.InitialHolding,
			&i.Holding,
			&i.BinanceAccountID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AccountName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBot = `-- name: UpdateBot :one
UPDATE bots
SET
    name = $3,
    strategy = $4,
    initial_holding = $5,
    binance_account_id = $6,
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, name, strategy, status, win_rate, profit_factor, trades, initial_holding, holding, binance_account_id, created_at, updated_at
`

type UpdateBotParams struct {
	ID               int32          `json:"id"`
	UserID           int32          `json:"user_id"`
	Name             string         `json:"name"`
	Strategy         string         `json:"strategy"`
	InitialHolding   pgtype.Numeric `json:"initial_holding"`
	BinanceAccountID pgtype.Int4    `json:"binance_account_id"`
}

type UpdateBotRow struct {
	ID               int32              `json:"id"`
	UserID           int32              `json:"user_id"`
	Name             string             `json:"name"`
	Strategy         string             `json:"strategy"`
	Status           pgtype.Text        `json:"status"`
	WinRate          pgtype.Numeric     `json:"win_rate"`
	ProfitFactor     pgtype.Numeric     `json:"profit_factor"`
	Trades           pgtype.Int4        `json:"trades"`
	InitialHolding   pgtype.Numeric     `json:"initial_holding"`
	Holding          pgtype.Numeric     `json:"holding"`
	BinanceAccountID pgtype.Int4        `json:"binance_account_id"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateBot(ctx context.Context, arg UpdateBotParams) (UpdateBotRow, error) {
	row := q.db.QueryRow(ctx, updateBot,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Strategy,
		arg.InitialHolding,
		arg.BinanceAccountID,
	)
	var i UpdateBotRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Strategy,
		&i.Status,
		&i.WinRate,
		&i.ProfitFactor,
		&i.Trades,
		&i.InitialHolding,
		&i.Holding,
		&i.BinanceAccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBotStatus = `-- name: UpdateBotStatus :one
UPDATE bots
SET 
    status = $3,
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, name, strategy, status, win_rate, profit_factor, trades, initial_holding, holding, created_at, updated_at
`

type UpdateBotStatusParams struct {
	ID     int32       `json:"id"`
	UserID int32       `json:"user_id"`
	Status pgtype.Text `json:"status"`
}

type UpdateBotStatusRow struct {
	ID             int32              `json:"id"`
	UserID         int32              `json:"user_id"`
	Name           string             `json:"name"`
	Strategy       string             `json:"strategy"`
	Status         pgtype.Text        `json:"status"`
	WinRate        pgtype.Numeric     `json:"win_rate"`
	ProfitFactor   pgtype.Numeric     `json:"profit_factor"`
	Trades         pgtype.Int4        `json:"trades"`
	InitialHolding pgtype.Numeric     `json:"initial_holding"`
	Holding        pgtype.Numeric     `json:"holding"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateBotStatus(ctx context.Context, arg UpdateBotStatusParams) (UpdateBotStatusRow, error) {
	row := q.db.QueryRow(ctx, updateBotStatus, arg.ID, arg.UserID, arg.Status)
	var i UpdateBotStatusRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Strategy,
		&i.Status,
		&i.WinRate,
		&i.ProfitFactor,
		&i.Trades,
		&i.InitialHolding,
		&i.Holding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
