// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bots.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBot = `-- name: CreateBot :one
INSERT INTO bots (user_id, name, strategy, initial_holding)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, name, strategy, status, win_rate, profit_factor, trades, initial_holding, holding, created_at, updated_at
`

type CreateBotParams struct {
	UserID         int32          `json:"user_id"`
	Name           string         `json:"name"`
	Strategy       string         `json:"strategy"`
	InitialHolding pgtype.Numeric `json:"initial_holding"`
}

func (q *Queries) CreateBot(ctx context.Context, arg CreateBotParams) (Bot, error) {
	row := q.db.QueryRow(ctx, createBot,
		arg.UserID,
		arg.Name,
		arg.Strategy,
		arg.InitialHolding,
	)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Strategy,
		&i.Status,
		&i.WinRate,
		&i.ProfitFactor,
		&i.Trades,
		&i.InitialHolding,
		&i.Holding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBot = `-- name: DeleteBot :exec
DELETE FROM bots
WHERE id = $1 AND user_id = $2
`

type DeleteBotParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteBot(ctx context.Context, arg DeleteBotParams) error {
	_, err := q.db.Exec(ctx, deleteBot, arg.ID, arg.UserID)
	return err
}

const getBot = `-- name: GetBot :one
SELECT id, user_id, name, strategy, status, win_rate, profit_factor, trades, initial_holding, holding, created_at, updated_at
FROM bots
WHERE id = $1 AND user_id = $2
`

type GetBotParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetBot(ctx context.Context, arg GetBotParams) (Bot, error) {
	row := q.db.QueryRow(ctx, getBot, arg.ID, arg.UserID)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Strategy,
		&i.Status,
		&i.WinRate,
		&i.ProfitFactor,
		&i.Trades,
		&i.InitialHolding,
		&i.Holding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserBots = `-- name: GetUserBots :many
SELECT id, user_id, name, strategy, status, win_rate, profit_factor, trades, initial_holding, holding, created_at, updated_at
FROM bots
WHERE user_id = $1
`

func (q *Queries) GetUserBots(ctx context.Context, userID int32) ([]Bot, error) {
	rows, err := q.db.Query(ctx, getUserBots, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bot
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Strategy,
			&i.Status,
			&i.WinRate,
			&i.ProfitFactor,
			&i.Trades,
			&i.InitialHolding,
			&i.Holding,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBot = `-- name: UpdateBot :one
UPDATE bots
SET
    name = $3,
    strategy = $4,
    initial_holding = $5,
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, name, strategy, status, win_rate, profit_factor, trades, initial_holding, holding, created_at, updated_at
`

type UpdateBotParams struct {
	ID             int32          `json:"id"`
	UserID         int32          `json:"user_id"`
	Name           string         `json:"name"`
	Strategy       string         `json:"strategy"`
	InitialHolding pgtype.Numeric `json:"initial_holding"`
}

func (q *Queries) UpdateBot(ctx context.Context, arg UpdateBotParams) (Bot, error) {
	row := q.db.QueryRow(ctx, updateBot,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Strategy,
		arg.InitialHolding,
	)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Strategy,
		&i.Status,
		&i.WinRate,
		&i.ProfitFactor,
		&i.Trades,
		&i.InitialHolding,
		&i.Holding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBotStatus = `-- name: UpdateBotStatus :one
UPDATE bots
SET 
    status = $3,
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, name, strategy, status, win_rate, profit_factor, trades, initial_holding, holding, created_at, updated_at
`

type UpdateBotStatusParams struct {
	ID     int32       `json:"id"`
	UserID int32       `json:"user_id"`
	Status pgtype.Text `json:"status"`
}

func (q *Queries) UpdateBotStatus(ctx context.Context, arg UpdateBotStatusParams) (Bot, error) {
	row := q.db.QueryRow(ctx, updateBotStatus, arg.ID, arg.UserID, arg.Status)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Strategy,
		&i.Status,
		&i.WinRate,
		&i.ProfitFactor,
		&i.Trades,
		&i.InitialHolding,
		&i.Holding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
